#include "Map.h"
#include "TextureManager.h"

enum class TileType {
	co,
	dat,
	nuoc
};

int lvl1[20][25] = {
	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,2,0,0,0,2},
	{2,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,2},
	{2,0,0,0,0,2,2,1,1,1,1,1,2,0,0,0,0,1,1,1,1,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{2,1,0,0,2,2,2,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{2,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2},
	{2,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2},
	{2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,1,0,0,0,0,0,0,2},
	{2,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,2,1,1,0,0,0,0,0,2},
	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
	{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},

};



Map::Map()
{
	dat = TextureManager::LoadTexture("0 bit/dat.png");
	co = TextureManager::LoadTexture("0 bit/co.png");
	nuoc = TextureManager::LoadTexture("0 bit/nuoc.png");

	LoadMap(lvl1);

	src.x = 0;
	src.y = 0;
	src.w = src.h = 32;
	dest.h = dest.w = 32;
	dest.x = dest.y = 0;
}



void Map::LoadMap(int arr[20][25])
{
	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 25; j++) {
			map[i][j] = arr[i][j];
		}
	}
}

int Map::layvitri(int x, int y) {
	return lvl1[x][y];
}

void Map::DrawMap()
{
	int type = 0;
	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 25; j++) {
			type = map[i][j];

			dest.x = j * 32;
			dest.y = i * 32;

			switch (type) {
			case 0:
				TextureManager::Draw(nuoc, src, dest);
				break;
			case 1:
				TextureManager::Draw(co, src, dest);
				break;
			case 2:
				TextureManager::Draw(dat, src, dest);
				break;
			default:
				break;
			}

		}
	}
}